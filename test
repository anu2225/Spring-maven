https://chatgpt.com/share/68abda84-5668-800a-8bd0-c6fc02a71504



<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.5.5</version>
    <relativePath/>
  </parent>

  <groupId>com.example</groupId>
  <artifactId>LoginApp</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>LoginApp</name>

  <properties>
    <java.version>17</java.version>
  </properties>

  <dependencies>
    <!-- Web + embedded Tomcat -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- JSP support -->
    <dependency>
      <groupId>org.apache.tomcat.embed</groupId>
      <artifactId>tomcat-embed-jasper</artifactId>
    </dependency>

    <!-- JSTL for JSP -->
    <dependency>
      <groupId>jakarta.servlet.jsp.jstl</groupId>
      <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.glassfish.web</groupId>
      <artifactId>jakarta.servlet.jsp.jstl</artifactId>
    </dependency>

    <!-- DevTools (optional) -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
</project>



package com.example.loginapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LoginAppApplication {
    public static void main(String[] args) {
        SpringApplication.run(LoginAppApplication.class, args);
    }
}

package com.example.loginapp.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller
public class LoginController {

    @GetMapping("/")
    public String showLogin() {
        return "login"; // /WEB-INF/jsp/login.jsp
    }

    @PostMapping("/login")
    public String doLogin(@RequestParam String username,
                          @RequestParam String password,
                          Model model) {
        if ("admin".equals(username) && "1234".equals(password)) {
            model.addAttribute("uname", username);
            return "welcome";  // /WEB-INF/jsp/welcome.jsp
        } else {
            model.addAttribute("error", "Invalid Username or Password!");
            return "login";
        }
    }
}




spring.application.name=LoginApp
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp
# server.port=8081   # 8080 busy असेल तर uncomment करा



<%@ page contentType="text/html;charset=UTF-8" %>
<!DOCTYPE html>
<html>
<head><title>Login</title></head>
<body>
<h2>Login</h2>
<form action="login" method="post">
    Username: <input type="text" name="username" required/><br/><br/>
    Password: <input type="password" name="password" required/><br/><br/>
    <input type="submit" value="Login"/>
</form>
<p style="color:red;">${error}</p>
</body>
</html>





<%@ page contentType="text/html;charset=UTF-8" %>
<!DOCTYPE html>
<html>
<head><title>Welcome</title></head>
<body>
<h2>Welcome, ${uname}!</h2>
<a href="/">Back to Login</a>
</body>
</html>































sql query
SELECT 
    a.adoption_id,
    an.species,
    a.adoption_date
FROM 
    Adoptions a
JOIN 
    Animals an ON a.animal_id = an.animal_id
JOIN 
    Adopters ad ON a.adopter_id = ad.adopter_id
WHERE 
    ad.age NOT BETWEEN 30 AND 40
ORDER BY 
    a.adoption_id ASC;





//secure code generation-1
import java.util.Scanner;

public class SecuredCode {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the word: ");
        String word = sc.nextLine();

        // Step 1: Reverse
        String reversed = new StringBuilder(word).reverse().toString();

        // Step 2: Caesar Cipher (+3 shift)
        StringBuilder shifted = new StringBuilder();
        for (char ch : reversed.toCharArray()) {
            if (Character.isLetter(ch)) {
                char base = Character.isUpperCase(ch) ? 'A' : 'a';
                char newChar = (char) ((ch - base + 3) % 26 + base);
                shifted.append(newChar);
            } else {
                shifted.append(ch);
            }
        }

        // Step 3: ASCII values
        StringBuilder asciiCode = new StringBuilder();
        for (int i = 0; i < shifted.length(); i++) {
            asciiCode.append((int) shifted.charAt(i));
            if (i < shifted.length() - 1) asciiCode.append("-");
        }

        System.out.println("Secured Code: " + asciiCode);
    }
}







//Array transformation-2
import java.util.Scanner;

public class ArrayTransform {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input size
        System.out.print("Enter array size: ");
        int n = sc.nextInt();

        if (n < 3 || n > 7) {
            System.out.println(n + " is an invalid size");
            return;
        }

        int[] arr = new int[n];
        System.out.println("Enter " + n + " numbers:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Transformation
        for (int i = 0; i < n; i++) {
            int transformed;
            if ((i + 1) % 2 != 0) { // odd position (1st, 3rd,...)
                transformed = arr[i] * arr[i];
            } else { // even position
                transformed = arr[i] * arr[i] * arr[i];
            }

            // add to next element (circular)
            int nextIndex = (i + 1) % n;
            int result = transformed + arr[nextIndex];

            System.out.println(result);
        }
    }
}

